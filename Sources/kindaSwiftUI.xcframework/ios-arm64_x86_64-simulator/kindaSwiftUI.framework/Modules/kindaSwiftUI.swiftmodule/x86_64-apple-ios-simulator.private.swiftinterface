// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios16.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name kindaSwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Combine/*.Combine*/
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
@_exported import kindaSwiftUI
public enum RequestError : Swift.Error {
  case requestCompositionFailure
  case unexpectedResponse
  case decoderFailure
  public static func == (a: kindaSwiftUI.RequestError, b: kindaSwiftUI.RequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LicenseKeyStatusResult {
  public var isActive: Swift.Bool
  public var message: Swift.String
}
open class Request : kindaSwiftUI.HTTPRequest {
  public var scheme: kindaSwiftUI.Scheme
  public var host: Swift.String
  public var path: Swift.String
  public var port: Swift.Int?
  public var headers: [Swift.String : Swift.String]?
  public var queryParameters: [Swift.String : Swift.String]?
  public var method: kindaSwiftUI.HTTPMethod
  public var body: kindaSwiftUI.HTTPBody?
  public init(scheme: kindaSwiftUI.Scheme, host: Swift.String, path: Swift.String, port: Swift.Int? = nil, method: kindaSwiftUI.HTTPMethod, headers: [Swift.String : Swift.String]? = nil, queryParameters: [Swift.String : Swift.String]? = nil, body: kindaSwiftUI.HTTPBody? = nil)
  @objc deinit
}
public struct PresentationCompactAdaptation {
  public var horizontal: SwiftUI.PresentationAdaptation
  public var vertical: SwiftUI.PresentationAdaptation
  public init(horizontal: SwiftUI.PresentationAdaptation, vertical: SwiftUI.PresentationAdaptation)
}
public struct ModalValue {
  public var index: Swift.Int
  public var dependency: Any?
  public init(index: Swift.Int, dependency: Any? = nil)
}
public struct AlertAction : Swift.Identifiable {
  public let id: Foundation.UUID
  public init(role: SwiftUI.ButtonRole? = nil, label: Swift.String, action: (() -> Swift.Void)? = nil)
  public init(role: SwiftUI.ButtonRole? = nil, label: kindaSwiftUI.AlertActionLabel, action: (() -> Swift.Void)? = nil)
  public typealias ID = Foundation.UUID
}
@_Concurrency.MainActor(unsafe) public struct Page<Destination, Content> : SwiftUI.View where Destination : kindaSwiftUI.RouterDestination, Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var content: (kindaSwiftUI.PageContext<Destination>) -> Content
  @_Concurrency.MainActor(unsafe) public init(content: @escaping (kindaSwiftUI.PageContext<Destination>) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI4PageV4bodyQrvp", 0) __<Destination, Content>
}
public struct PageContext<Destination> where Destination : kindaSwiftUI.RouterDestination {
  public var router: kindaSwiftUI.Router<Destination>
  public var toastManager: kindaSwiftUI.ToastManager
  public var alertManager: kindaSwiftUI.AlertManager
}
public struct TabRoot<Destination, Tab> where Destination : kindaSwiftUI.RouterDestination, Tab : kindaSwiftUI.RouterTab {
  public init(_ root: Destination, tab: Tab)
}
@_Concurrency.MainActor(unsafe) public struct KindaSwiftUI247ContentView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI05KindaB16UI247ContentViewV4bodyQrvp", 0) __<Content>
}
public enum DecodingFailureStrategy {
  case ignore
  case raise
  public static func == (a: kindaSwiftUI.DecodingFailureStrategy, b: kindaSwiftUI.DecodingFailureStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.Color {
  public init(hex: Swift.String)
}
extension SwiftUI.View {
  public func fullScreenCover<Destination>(for modal: Destination, onDismiss: (() -> Swift.Void)? = nil) -> some SwiftUI.View where Destination : kindaSwiftUI.RouterDestination
  
}
public enum Scheme : Swift.CustomStringConvertible {
  case http
  case https
  public var description: Swift.String {
    get
  }
  public static func == (a: kindaSwiftUI.Scheme, b: kindaSwiftUI.Scheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AlertOptions {
  public init(type: kindaSwiftUI.AlertType = .alert, title: Swift.String? = nil, message: Swift.String? = nil, actions: [kindaSwiftUI.AlertAction]? = nil)
}
public protocol GenericEncoder {
  func encode<T>(_ object: T) throws -> Foundation.Data where T : Swift.Encodable
}
public struct CustomTabRoot<Destination, Tab, UnselectedTab> where Destination : kindaSwiftUI.RouterDestination, Tab : kindaSwiftUI.RouterTab, UnselectedTab : kindaSwiftUI.RouterUnselectedTab {
  public init(_ root: Destination, tab: Tab, unselectedTab: UnselectedTab)
}
public class AlertManager : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isAlertPresented) public var isAlertPresented: Swift.Bool {
    get
    set
    _modify
  }
  public var $isAlertPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isConfirmationDialogPresented) public var isConfirmationDialogPresented: Swift.Bool {
    get
    set
    _modify
  }
  public var $isConfirmationDialogPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($options) public var options: kindaSwiftUI.AlertOptions {
    get
    set
    _modify
  }
  public var $options: Combine.Published<kindaSwiftUI.AlertOptions>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func present(options: kindaSwiftUI.AlertOptions)
  public func present(_ type: kindaSwiftUI.AlertType, title: Swift.String? = nil, message: Swift.String? = nil, actions: [kindaSwiftUI.AlertAction]? = nil)
  public func present(_ preset: kindaSwiftUI.AlertPreset, _ type: kindaSwiftUI.AlertType, message: Swift.String, actions: [kindaSwiftUI.AlertAction]? = nil)
  public func present(_ error: any Swift.Error, actions: [kindaSwiftUI.AlertAction]? = nil)
  public func hide()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct KindaSwiftUIContentView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(logLevel: kindaSwiftUI.KindaSwiftUILogLevel, logTypes: [kindaSwiftUI.KindaSwiftUILogType] = KindaSwiftUILogType.allCases, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(log: kindaSwiftUI.KindaSwiftUILog, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI05KindaB13UIContentViewV4bodyQrvp", 0) __<Content>
}
@_Concurrency.MainActor(unsafe) public struct CustomTabRouterStack<Destination, Tab, UnselectedTab> : SwiftUI.View where Destination : kindaSwiftUI.RouterDestination, Tab : kindaSwiftUI.RouterTab, UnselectedTab : kindaSwiftUI.RouterUnselectedTab {
  @_Concurrency.MainActor(unsafe) public init(roots: [Destination], tabs: [Tab], unselectedTabs: [UnselectedTab] = [], tabSelection: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) public init(_ roots: [kindaSwiftUI.CustomTabRoot<Destination, Tab, UnselectedTab>], tabSelection: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI20CustomTabRouterStackV4bodyQrvp", 0) __<Destination, Tab, UnselectedTab>
}
extension Foundation.Data {
  public func jsonString(pretty: Swift.Bool = false) -> Swift.String
}
@_Concurrency.MainActor(unsafe) public struct RouterStack<Destination> : SwiftUI.View where Destination : kindaSwiftUI.RouterDestination {
  @_Concurrency.MainActor(unsafe) public init(root: Destination)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI11RouterStackV4bodyQrvp", 0) __<Destination>
}
public struct RequestData {
  public let data: Foundation.Data
  public let response: Foundation.HTTPURLResponse
}
extension SwiftUI.View {
  public func `if`<Content>(_ condition: @autoclosure () -> Swift.Bool, transform: (Self) -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
public class Router<Destination> : Combine.ObservableObject where Destination : kindaSwiftUI.RouterDestination {
  @Combine.Published @_projectedValueProperty($modalsState) public var modalsState: [Swift.Array<Swift.Bool>] {
    get
    set
    _modify
  }
  public var $modalsState: Combine.Published<[Swift.Array<Swift.Bool>]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($activeModalsIndices) public var activeModalsIndices: [[Swift.Int]] {
    get
    set
    _modify
  }
  public var $activeModalsIndices: Combine.Published<[[Swift.Int]]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($tabSelection) public var tabSelection: Swift.Int {
    get
    set
    _modify
  }
  public var $tabSelection: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($paths) public var paths: [Swift.Array<SwiftUI.NavigationPath>] {
    get
    set
    _modify
  }
  public var $paths: Combine.Published<[Swift.Array<SwiftUI.NavigationPath>]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($pathIndex) public var pathIndex: [Swift.Int] {
    get
    set
    _modify
  }
  public var $pathIndex: Combine.Published<[Swift.Int]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($modalsCount) public var modalsCount: [Swift.Int] {
    get
    set
    _modify
  }
  public var $modalsCount: Combine.Published<[Swift.Int]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($stackedViewsInModals) public var stackedViewsInModals: [[Swift.Int]] {
    get
    set
    _modify
  }
  public var $stackedViewsInModals: Combine.Published<[[Swift.Int]]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func push(_ destination: Destination, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func push(_ destination: Destination) async
  #endif
  public func present<T>(_ destination: Destination, dependencyLink: SwiftUI.Binding<T>, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func present<T>(_ destination: Destination, dependencyLink: SwiftUI.Binding<T>) async
  #endif
  public func present(_ destination: Destination, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func present(_ destination: Destination) async
  #endif
  public func pop(_ type: kindaSwiftUI.PopType = .one, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func pop(_ type: kindaSwiftUI.PopType = .one) async
  #endif
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum PopType {
  case one
  case the(last: Swift.Int)
  case to(index: Swift.Int)
  case toRoot
  case toNearestRoot
  case theLastWith(style: kindaSwiftUI.PopStyle, last: Swift.Int)
  case toIndexWith(style: kindaSwiftUI.PopStyle, index: Swift.Int)
  case toRootWith(style: kindaSwiftUI.PopStyle)
  case toNearestRootWith(style: kindaSwiftUI.PopStyle)
}
public enum PopStyle : Swift.String {
  case oneByOne, shortest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Toast : SwiftUI.View {
  public var displayMode: kindaSwiftUI.ToastDisplayMode
  public var type: kindaSwiftUI.ToastType
  public var title: Swift.String?
  public var message: Swift.String?
  public var style: kindaSwiftUI.ToastStyle?
  public init(displayMode: kindaSwiftUI.ToastDisplayMode = .alert, type: kindaSwiftUI.ToastType, title: Swift.String? = nil, message: Swift.String? = nil, style: kindaSwiftUI.ToastStyle? = nil)
  public init(displayMode: kindaSwiftUI.ToastDisplayMode, type: kindaSwiftUI.ToastType, title: Swift.String? = nil)
  public var banner: some SwiftUI.View {
    get
  }
  public var hud: some SwiftUI.View {
    get
  }
  public var alert: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI5ToastV4bodyQrvp", 0) __
}
public struct ToastModifier : SwiftUI.ViewModifier {
  public func main() -> some SwiftUI.View
  
  @_Concurrency.MainActor(unsafe) public func body(content: kindaSwiftUI.ToastModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI13ToastModifierV4body7contentQr0bC005_ViewE8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func toast(isPresented: SwiftUI.Binding<Swift.Bool>, duration: Swift.Double = 2, tapToDismiss: Swift.Bool = true, offsetY: CoreFoundation.CGFloat = 0, toast: @escaping () -> kindaSwiftUI.Toast, onTap: (() -> ())? = nil, completion: (() -> ())? = nil) -> some SwiftUI.View
  
}
public enum ToastBannerAnimation {
  case slide, pop
  public static func == (a: kindaSwiftUI.ToastBannerAnimation, b: kindaSwiftUI.ToastBannerAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToastPreset {
  case progress, error, success, warning, info
  public static func == (a: kindaSwiftUI.ToastPreset, b: kindaSwiftUI.ToastPreset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToastDisplayMode : Swift.Equatable {
  case alert
  case hud
  case banner(_: kindaSwiftUI.ToastBannerAnimation)
  public static func == (a: kindaSwiftUI.ToastDisplayMode, b: kindaSwiftUI.ToastDisplayMode) -> Swift.Bool
}
public enum ToastType : Swift.Equatable {
  case success(_: SwiftUI.Color)
  case error(_: SwiftUI.Color)
  case systemImage(_: Swift.String, _: SwiftUI.Color)
  case image(_: Swift.String, _: SwiftUI.Color)
  case loading
  case regular
  public static func == (a: kindaSwiftUI.ToastType, b: kindaSwiftUI.ToastType) -> Swift.Bool
}
public enum BackgroundMaterial {
  case regularMaterial
  case thickMaterial
  case thinMaterial
  case ultraThinMaterial
  case ultraThickMaterial
  public static func == (a: kindaSwiftUI.BackgroundMaterial, b: kindaSwiftUI.BackgroundMaterial) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToastStyle : Swift.Equatable {
  case style(backgroundMaterial: kindaSwiftUI.BackgroundMaterial? = .ultraThinMaterial, backgroundColor: SwiftUI.Color? = nil, titleColor: SwiftUI.Color? = nil, messageColor: SwiftUI.Color? = nil, titleFont: SwiftUI.Font? = nil, messageFont: SwiftUI.Font? = nil, imageMaxLength: CoreFoundation.CGFloat? = 20, systemImageFont: SwiftUI.Font? = nil, cornerRadius: CoreFoundation.CGFloat? = nil)
  public static func == (a: kindaSwiftUI.ToastStyle, b: kindaSwiftUI.ToastStyle) -> Swift.Bool
}
public class ToastManager : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isPresented) public var isPresented: Swift.Bool {
    get
    set
    _modify
  }
  public var $isPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($options) public var options: kindaSwiftUI.ToastOptions {
    get
    set
    _modify
  }
  public var $options: Combine.Published<kindaSwiftUI.ToastOptions>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, type: kindaSwiftUI.ToastType = .regular, title: Swift.String? = nil, message: Swift.String? = nil, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, type: kindaSwiftUI.ToastType = .regular, title: Swift.String? = nil, message: Swift.String? = nil, backgroundMaterial: kindaSwiftUI.BackgroundMaterial? = nil, backgroundColor: SwiftUI.Color? = nil, titleColor: SwiftUI.Color? = nil, messageColor: SwiftUI.Color? = nil, titleFont: SwiftUI.Font? = nil, messageFont: SwiftUI.Font? = nil, imageMaxLength: CoreFoundation.CGFloat? = 20, systemImageFont: SwiftUI.Font? = nil, cornerRadius: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor public func present(options: kindaSwiftUI.ToastOptions)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, type: kindaSwiftUI.ToastType = .regular, title: Swift.String, message: Swift.String, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, type: kindaSwiftUI.ToastType = .regular, title: Swift.String, message: Swift.String? = nil, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, type: kindaSwiftUI.ToastType = .regular, title: Swift.String? = nil, message: Swift.String, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ preset: kindaSwiftUI.ToastPreset, _ displayMode: kindaSwiftUI.ToastDisplayMode, message: Swift.String, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, title: Swift.String, message: Swift.String, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, title: Swift.String, style: kindaSwiftUI.ToastStyle? = nil)
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode, message: Swift.String, style: kindaSwiftUI.ToastStyle? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func present(_ displayMode: kindaSwiftUI.ToastDisplayMode = .hud, type: kindaSwiftUI.ToastType = .loading, title: Swift.String? = nil, message: Swift.String? = nil, style: kindaSwiftUI.ToastStyle? = nil, alertManager: kindaSwiftUI.AlertManager? = nil, action: @escaping () async throws -> ()) async throws
  #endif
  @_Concurrency.MainActor public func hide()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct ToastOptions {
  public init(displayMode: kindaSwiftUI.ToastDisplayMode? = nil, type: kindaSwiftUI.ToastType? = nil, title: Swift.String? = nil, message: Swift.String? = nil, style: kindaSwiftUI.ToastStyle? = nil)
}
extension SwiftUI.View {
  public func sheet<Destination>(for modal: Destination, options: kindaSwiftUI.PresentationOptions = PresentationOptions(), onDismiss: (() -> Swift.Void)? = nil) -> some SwiftUI.View where Destination : kindaSwiftUI.RouterDestination
  
}
public struct NetworkingError : Swift.Error, Foundation.LocalizedError {
  public enum Status : Swift.Int {
    case unknown
    case networkUnreachable
    case unableToParseResponse
    case unableToParseRequest
    case continueError
    case switchingProtocols
    case processing
    case ok
    case created
    case accepted
    case nonAuthoritativeInformation
    case noContent
    case resetContent
    case partialContent
    case multiStatus
    case alreadyReported
    case IMUsed
    case multipleChoices
    case movedPermanently
    case found
    case seeOther
    case notModified
    case useProxy
    case switchProxy
    case temporaryRedirect
    case permenantRedirect
    case badRequest
    case unauthorized
    case paymentRequired
    case forbidden
    case notFound
    case methodNotAllowed
    case notAcceptable
    case proxyAuthenticationRequired
    case requestTimeout
    case conflict
    case gone
    case lengthRequired
    case preconditionFailed
    case payloadTooLarge
    case uriTooLong
    case unsupportedMediaType
    case rangeNotSatisfiable
    case expectationFailed
    case teapot
    case misdirectedRequest
    case unprocessableEntity
    case locked
    case failedDependency
    case upgradeRequired
    case preconditionRequired
    case tooManyRequests
    case requestHeaderFieldsTooLarge
    case unavailableForLegalReasons
    case noResponse
    case sslCertificateError
    case sslCertificateRequired
    case httpRequestSentToHTTPSPort
    case clientClosedRequest
    case internalServerError
    case notImplemented
    case badGateway
    case serviceUnavailable
    case gatewayTimeout
    case httpVersionNotSupported
    case variantAlsoNegotiates
    case insufficientStorage
    case loopDetected
    case notExtended
    case networkAuthenticationRequired
    case cancelled
    case badURL
    case timedOut
    case unsupportedURL
    case cannotFindHost
    case cannotConnectToHost
    case networkConnectionLost
    case dnsLookupFailed
    case httpTooManyRedirects
    case resourceUnavailable
    case notConnectedToInternet
    case redirectToNonExistentLocation
    case badServerResponse
    case userCancelledAuthentication
    case userAuthenticationRequired
    case zeroByteResource
    case cannotDecodeRawData
    case cannotDecodeContentData
    case cannotParseResponse
    case appTransportSecurityRequiresSecureConnection
    case fileDoesNotExist
    case fileIsDirectory
    case noPermissionsToReadFile
    case dataLengthExceedsMaximum
    case secureConnectionFailed
    case serverCertificateHasBadDate
    case serverCertificateUntrusted
    case serverCertificateHasUnknownRoot
    case serverCertificateNotYetValid
    case clientCertificateRejected
    case CclientCertificateRequired
    case cannotLoadFromNetwork
    case cannotCreateFile
    case cannotOpenFile
    case cannotCloseFile
    case cannotWriteToFile
    case CcannotRemoveFile
    case cannotMoveFile
    case downloadDecodingFailedMidStream
    case downloadDecodingFailedToComplete
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var status: kindaSwiftUI.NetworkingError.Status
  public var code: Swift.Int {
    get
  }
  public var jsonPayload: Any?
  public init(errorCode: Swift.Int)
  public init(status: kindaSwiftUI.NetworkingError.Status)
  public init(error: any Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
extension kindaSwiftUI.NetworkingError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension kindaSwiftUI.NetworkingError {
  public static var unableToParseResponse: kindaSwiftUI.NetworkingError {
    get
  }
  public static var unableToParseRequest: kindaSwiftUI.NetworkingError {
    get
  }
  public static var unknownError: kindaSwiftUI.NetworkingError {
    get
  }
}
extension Swift.DecodingError {
  public var description: Swift.String? {
    get
  }
}
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct RequestResults<T, U> : SwiftUI.DynamicProperty where U : Swift.Decodable {
  public struct Configuration {
    public var request: kindaSwiftUI.Request
    public var requester: kindaSwiftUI.Requester
    public var decodingFailureStrategy: kindaSwiftUI.DecodingFailureStrategy
    public var error: (any Swift.Error)?
  }
  @_Concurrency.MainActor(unsafe) public var wrappedValue: U {
    get
    nonmutating set
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.Binding<U> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var configuration: kindaSwiftUI.RequestResults<T, U>.Configuration {
    get
    nonmutating set
  }
  @_Concurrency.MainActor(unsafe) public init(request: kindaSwiftUI.Request, requester: kindaSwiftUI.Requester = Requester(decoder: JSONDecoder()), decodingFailureStrategy: kindaSwiftUI.DecodingFailureStrategy = .raise) where T : Swift.Decodable, U == [T]
  @_Concurrency.MainActor(unsafe) public init(scheme: kindaSwiftUI.Scheme, host: Swift.String, path: Swift.String, port: Swift.Int? = nil, method: kindaSwiftUI.HTTPMethod, headers: [Swift.String : Swift.String]? = nil, queryParameters: [Swift.String : Swift.String]? = nil, body: kindaSwiftUI.HTTPBody? = nil, session: Foundation.URLSession = URLSession.shared, decoder: (any kindaSwiftUI.GenericDecoder)? = JSONDecoder(), decodingFailureStrategy: kindaSwiftUI.DecodingFailureStrategy = .raise) where T : Swift.Decodable, U == [T]
}
public struct RequestJson {
  public let json: Swift.String
  public let response: Foundation.HTTPURLResponse
}
public struct RequestFetch<R> where R : Swift.Decodable {
  public let result: R
  public let response: Foundation.HTTPURLResponse
}
public struct PresentationOptions {
  public var detents: Swift.Set<SwiftUI.PresentationDetent>
  public var dragIndicatorVisibility: SwiftUI.Visibility
  public var cornerRadius: CoreFoundation.CGFloat?
  public var compactAdaptation: kindaSwiftUI.PresentationCompactAdaptation
  public var contentInteraction: SwiftUI.PresentationContentInteraction
  public init(detents: Swift.Set<SwiftUI.PresentationDetent> = [], dragIndicatorVisibility: SwiftUI.Visibility = .automatic, cornerRadius: CoreFoundation.CGFloat? = nil, compactAdaptation: kindaSwiftUI.PresentationCompactAdaptation = .init(horizontal: .automatic, vertical: .automatic), contentInteraction: SwiftUI.PresentationContentInteraction = .automatic)
}
public protocol RouterDestination : Swift.Hashable, SwiftUI.View {
  var modalValue: kindaSwiftUI.ModalValue { get }
  init?(modalValue: kindaSwiftUI.ModalValue)
}
public protocol RouterTab : Swift.Hashable, SwiftUI.View {
}
public protocol RouterUnselectedTab : Swift.Hashable, SwiftUI.View {
}
public struct HTTPBody {
  public init(data: Foundation.Data?)
  public init<T>(_ object: T, encoder: any kindaSwiftUI.GenericEncoder = JSONEncoder()) where T : Swift.Encodable
}
public enum AlertPreset {
  case error, success, warning, info
  public static func == (a: kindaSwiftUI.AlertPreset, b: kindaSwiftUI.AlertPreset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.JSONDecoder : kindaSwiftUI.GenericDecoder {
  public func decode<T>(expect type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}
public enum AlertActionLabel : Swift.String {
  case ok
  case cancel
  case agree
  case later
  case remindMeLater
  case skip
  case dontAskAgain
  case dismiss
  case forward
  case back
  case previous
  case next
  case yes
  case no
  case confirm
  case deny
  case open
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OptionalDataView<T, C> : SwiftUI.View where T : Swift.Decodable, C : SwiftUI.View {
  public let data: T?
  public var content: (T) -> C
  public init(for data: T?, content: @escaping (T) -> C)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI16OptionalDataViewV4bodyQrvp", 0) __<T, C>
}
public enum KindaSwiftUILogType : Swift.String, Swift.CaseIterable {
  case developer
  case navigationRouter
  public init?(rawValue: Swift.String)
  public typealias AllCases = [kindaSwiftUI.KindaSwiftUILogType]
  public typealias RawValue = Swift.String
  public static var allCases: [kindaSwiftUI.KindaSwiftUILogType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct KindaSwiftUILogCenter {
  public static var log: kindaSwiftUI.KindaSwiftUILog
}
public struct KindaSwiftUILog {
  public var level: kindaSwiftUI.KindaSwiftUILogLevel
  public var types: [kindaSwiftUI.KindaSwiftUILogType]
  public init(_ level: kindaSwiftUI.KindaSwiftUILogLevel = .none, types: [kindaSwiftUI.KindaSwiftUILogType] = [])
}
public enum KindaSwiftUILogLevel {
  case none, debug, full
  public static func == (a: kindaSwiftUI.KindaSwiftUILogLevel, b: kindaSwiftUI.KindaSwiftUILogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func log(_ level: kindaSwiftUI.KindaSwiftUILogLevel = .debug, type: kindaSwiftUI.KindaSwiftUILogType = .developer, dateFormat: Swift.String = "HH:mm:ss.SSSS", _ items: Any...)
open class Requester {
  public init(session: Foundation.URLSession = URLSession.shared, decoder: (any kindaSwiftUI.GenericDecoder)? = JSONDecoder())
  #if compiler(>=5.3) && $AsyncAwait
  open func send<T, R>(_ request: T, expect type: R.Type) async throws -> kindaSwiftUI.RequestFetch<R> where T : kindaSwiftUI.HTTPRequest, R : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func send<T>(_ request: T, pretty: Swift.Bool = false) async throws -> kindaSwiftUI.RequestJson where T : kindaSwiftUI.HTTPRequest
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func send<T>(_ request: T) async throws -> kindaSwiftUI.RequestData where T : kindaSwiftUI.HTTPRequest
  #endif
  @objc deinit
}
public struct LicenseKeyCenter {
  @discardableResult
  public static func isLicenseActive() -> Swift.Bool
  @discardableResult
  public static func getLicenseKeyStatusResult() -> kindaSwiftUI.LicenseKeyStatusResult
}
public protocol HTTPRequest {
  var scheme: kindaSwiftUI.Scheme { get }
  var host: Swift.String { get }
  var path: Swift.String { get }
  var port: Swift.Int? { get }
  var queryParameters: [Swift.String : Swift.String]? { get }
  var headers: [Swift.String : Swift.String]? { get }
  var method: kindaSwiftUI.HTTPMethod { get }
  var body: kindaSwiftUI.HTTPBody? { get }
  func composeRequest() -> Foundation.URLRequest?
}
extension kindaSwiftUI.HTTPRequest {
  public func convert(queryParameters: [Swift.String : Swift.String]) -> [Foundation.URLQueryItem]
  public func urlFromComponents() -> Foundation.URL?
  public func composeRequest() -> Foundation.URLRequest?
}
public protocol GenericDecoder {
  func decode<T>(expect type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}
@_Concurrency.MainActor(unsafe) public struct Screen<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var content: (kindaSwiftUI.ScreenContext) -> Content
  @_Concurrency.MainActor(unsafe) public init(content: @escaping (kindaSwiftUI.ScreenContext) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI6ScreenV4bodyQrvp", 0) __<Content>
}
public struct ScreenContext {
  public var toastManager: kindaSwiftUI.ToastManager
  public var alertManager: kindaSwiftUI.AlertManager
}
public enum HTTPMethod : Swift.CustomStringConvertible {
  case get
  case head
  case post
  case put
  case delete
  case patch
  case connect
  case options
  case trace
  public var description: Swift.String {
    get
  }
  public static func == (a: kindaSwiftUI.HTTPMethod, b: kindaSwiftUI.HTTPMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Response {
  associatedtype T
  var httpResponse: Foundation.HTTPURLResponse { get }
  var result: Self.T { get }
}
public struct PoweredByKindaSwiftUIView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI014PoweredByKindaB6UIViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct TabRouterStack<Destination, Tab> : SwiftUI.View where Destination : kindaSwiftUI.RouterDestination, Tab : kindaSwiftUI.RouterTab {
  @_Concurrency.MainActor(unsafe) public init(roots: [Destination], tabs: [Tab], tabSelection: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) public init(_ roots: [kindaSwiftUI.TabRoot<Destination, Tab>], tabSelection: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI14TabRouterStackV4bodyQrvp", 0) __<Destination, Tab>
}
open class RouterModalDependencyLinker : Combine.ObservableObject {
  public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct RequestResult<T> : SwiftUI.DynamicProperty where T : Swift.Decodable {
  public struct Configuration {
    public var request: kindaSwiftUI.Request
    public var requester: kindaSwiftUI.Requester
    public var decodingFailureStrategy: kindaSwiftUI.DecodingFailureStrategy
    public var error: (any Swift.Error)?
  }
  @_Concurrency.MainActor(unsafe) public var wrappedValue: T? {
    get
    nonmutating set
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.Binding<T?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var configuration: kindaSwiftUI.RequestResult<T>.Configuration {
    get
    nonmutating set
  }
  @_Concurrency.MainActor(unsafe) public init(request: kindaSwiftUI.Request, requester: kindaSwiftUI.Requester = Requester(decoder: JSONDecoder()), decodingFailureStrategy: kindaSwiftUI.DecodingFailureStrategy = .raise)
  @_Concurrency.MainActor(unsafe) public init(scheme: kindaSwiftUI.Scheme, host: Swift.String, path: Swift.String, port: Swift.Int? = nil, method: kindaSwiftUI.HTTPMethod, headers: [Swift.String : Swift.String]? = nil, queryParameters: [Swift.String : Swift.String]? = nil, body: kindaSwiftUI.HTTPBody? = nil, session: Foundation.URLSession = URLSession.shared, decoder: (any kindaSwiftUI.GenericDecoder)? = JSONDecoder(), decodingFailureStrategy: kindaSwiftUI.DecodingFailureStrategy = .raise)
}
@_Concurrency.MainActor final public class RequestResultManager<T> : Foundation.ObservableObject where T : Swift.Decodable {
  @Combine.Published @_projectedValueProperty($value) @_Concurrency.MainActor final public var value: T? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor final public var $value: Combine.Published<T?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(configuration: kindaSwiftUI.RequestResult<T>.Configuration)
  @_Concurrency.MainActor final public func fetch()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum AlertType {
  case alert, confirmationDialog
  public static func == (a: kindaSwiftUI.AlertType, b: kindaSwiftUI.AlertType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.JSONEncoder : kindaSwiftUI.GenericEncoder {
}
extension kindaSwiftUI.RequestError : Swift.Equatable {}
extension kindaSwiftUI.RequestError : Swift.Hashable {}
extension kindaSwiftUI.DecodingFailureStrategy : Swift.Equatable {}
extension kindaSwiftUI.DecodingFailureStrategy : Swift.Hashable {}
extension kindaSwiftUI.Scheme : Swift.Equatable {}
extension kindaSwiftUI.Scheme : Swift.Hashable {}
extension kindaSwiftUI.PopStyle : Swift.Equatable {}
extension kindaSwiftUI.PopStyle : Swift.Hashable {}
extension kindaSwiftUI.PopStyle : Swift.RawRepresentable {}
extension kindaSwiftUI.ToastBannerAnimation : Swift.Equatable {}
extension kindaSwiftUI.ToastBannerAnimation : Swift.Hashable {}
extension kindaSwiftUI.ToastPreset : Swift.Equatable {}
extension kindaSwiftUI.ToastPreset : Swift.Hashable {}
extension kindaSwiftUI.BackgroundMaterial : Swift.Equatable {}
extension kindaSwiftUI.BackgroundMaterial : Swift.Hashable {}
extension kindaSwiftUI.NetworkingError.Status : Swift.Equatable {}
extension kindaSwiftUI.NetworkingError.Status : Swift.Hashable {}
extension kindaSwiftUI.NetworkingError.Status : Swift.RawRepresentable {}
extension kindaSwiftUI.AlertPreset : Swift.Equatable {}
extension kindaSwiftUI.AlertPreset : Swift.Hashable {}
extension kindaSwiftUI.AlertActionLabel : Swift.Equatable {}
extension kindaSwiftUI.AlertActionLabel : Swift.Hashable {}
extension kindaSwiftUI.AlertActionLabel : Swift.RawRepresentable {}
extension kindaSwiftUI.KindaSwiftUILogType : Swift.Equatable {}
extension kindaSwiftUI.KindaSwiftUILogType : Swift.Hashable {}
extension kindaSwiftUI.KindaSwiftUILogType : Swift.RawRepresentable {}
extension kindaSwiftUI.KindaSwiftUILogLevel : Swift.Equatable {}
extension kindaSwiftUI.KindaSwiftUILogLevel : Swift.Hashable {}
extension kindaSwiftUI.HTTPMethod : Swift.Equatable {}
extension kindaSwiftUI.HTTPMethod : Swift.Hashable {}
extension kindaSwiftUI.RequestResultManager : Swift.Sendable {}
extension kindaSwiftUI.AlertType : Swift.Equatable {}
extension kindaSwiftUI.AlertType : Swift.Hashable {}
